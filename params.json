{"name":"Gramazon","tagline":"A Groovy library and Gradle plugin for working Amazon EC2 instances.","body":"# Gramazon #\r\n\r\n## A Groovy-Based API for Amazon EC2 ##\r\n\r\n<br>\r\n\r\n## About Gramazon ##\r\n\r\nAmazon Web Services offers a compute power on demand capability known as the Elastic Compute Cloud (EC2). The server resources in the cloud can be provisioned on demand by making HTTP Query API calls to EC2.\r\n\r\n**Gramazon** is an interface library that can be used to interact with the Amazon EC2 system and control server resources on demand from your **Groovy** scripts or from **Gradle**, using a plug-in.\r\n\r\n## Installation ###\r\n\r\n### Get an AWS Account ###\r\n\r\nBefore you can make use of this code you will need an Amazon Web Services developer account which you can sign up for at <http://aws-portal.amazon.com/gp/aws/developer/registration/index.html>. This account must also be specifically enabled for Amazon EC2 usage. AWS will provide you with an ‘AWS Access Key ID’ and a ‘Secret Access Key’ which will allow you to authenticate any API calls you make and ensure correct billing to you for usage of the service. Take note of these (and keep them secret!).\r\n\r\n### Build Gramazon ###\r\n\r\n**Gramazon** is built using [Gradle](http://www.gradle.org/). Install **Gradle** and type:\r\n\r\n\tgradle clean build\r\nPlease note that the build also executes some tests against Amazon EC2. In order for the tests to pass, a 'test.properties' file has to be created inside `/src/test/resources`. The file must contain the following key/value pairs properties:\r\n\r\n\taws.accessKeyId=XXXXXXXXX # the amazon ec2 access key\r\n\taws.secretKey=the amazon ec2 secret key\r\n\taws.defaultRegion=eu-west-1\r\n\taws.defaultAmi=XXXX # the default AMI id to use in the tests\r\n\taws.defaultKeypair=XXXXX # the default key pair\r\n\taws.defaultSecurity=XXXXXXX # the default security group\r\n\taws.defaultInstanceType=t1.micro\r\n\taws.defaultEBSSize=-1 # set to -1 to use the standard AMI ESB size\r\n\r\n\r\n## Using Gramazon ##\r\n\r\n### Groovy API ###\r\n\r\n\r\nThe easiest way to use **Gramazon** in a **Groovy** script is by importing the dependency using [Grape](http://groovy.codehaus.org/Grape).\r\n\r\n\t@GrabResolver(name='oss', root='https://oss.sonatype.org/content/repositories/snapshots/')\r\n\t@Grab('com.aestasit.cloud.aws:gramazon:0.1-SNAPSHOT')\r\n\timport com.aestasit.cloud.aws.*\r\n\r\nAlternatively, the library can be imported using your favourite build tool.\r\n\r\n**Gramazon** has currently one main class, `EC2Client` which is invoked like so:\r\n\r\n\tdef ec2 = new EC2Client('eu-west-1')\r\n\r\nThe class requires that the EC2 region is specified in the constructor. For a list of available regions, please refer to this [document](http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region).\r\n\r\nIn order for the class to connect to the Amazon EC2 cloud infrastructure, the _Access Key ID_ and the _Secret Key_ must be specified. If you don't know these values, access this [page](https://portal.aws.amazon.com/gp/aws/securityCredentials) to get them (you need an active Amazon EC2 account). The the _Access Key ID_ and the _Secret Key_ are passed to **Gramazon** as system properties.\r\n\r\n\tSystem.setProperty(\"aws.accessKeyId\", '#################')\r\n\tSystem.setProperty(\"aws.secretKey\", '####################################')\r\n\r\nFor a list of available methods, please refer to the **Groovydoc** documentation available here. \r\n\r\n\r\n### Gradle Plugin ###\r\n\r\nTODO\r\n\r\n## Credits ##\r\n\r\nThis code is massively dependant on the Amazon SDK for Java. \r\n\r\n## Contact ##\r\n\r\n\r\nComments, patches, Git pull requests and bug reports are welcome. Send an email to luciano@aestasit.com.\r\n\r\n## Patches & Pull Requests ##\r\n\r\n\r\nPlease follow these steps if you want to send a patch or a GitHub pull request:\r\n\r\n- Fork aestasit/gramazon\r\n\r\n- Create a topic branch: `git checkout -b my_fix`\r\n\r\n- Make sure you add tests for your changes and that they all pass with `gradle test` \r\n\r\n- Commit your changes, one change/fix per commit\r\n\r\n- Push your fixes branch: `git push origin my_fix`\r\n\r\n- Open an Issue on GitHub referencing your branch and send a pull request.\r\n\r\n- Please do not push to `master` on your fork. Using a feature/bugfix branch will make everyone’s life easier.\r\n\r\nEnjoy!\r\n\r\nThe Aestas Team\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}